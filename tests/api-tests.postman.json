{
  "item": [{
      "name": "Auth",
      "item": [{
          "name": "Register",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "if (!(environment.isIntegrationTest)) {",
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                "",
                "var user = responseJSON.user || {};",
                "",
                "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "http://localhost:3000/api/users",
            "method": "POST",
            "header": [{
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"ms49366@fer.hr\", \"password\":\"abc123\", \"username\":\"mstorga\"}}"
            }
          }
        },
        {
          "name": "Login",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                "",
                "var user = responseJSON.user || {};",
                "",
                "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                "",
                "if(tests['User has \"token\" property']){",
                "    postman.setEnvironmentVariable('token', user.token);",
                "}",
                "",
                "tests['Environment variable \"token\" has been set'] = environment.token === user.token;",
                ""
              ]
            }
          }],
          "request": {
            "url": "http://localhost:3000/api/users/login",
            "method": "POST",
            "header": [{
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"ms49366@fer.hr\", \"password\":\"abc123\"}}"
            }
          }
        },
        {
          "name": "Current User",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                "",
                "var user = responseJSON.user || {};",
                "",
                "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                ""
              ]
            }
          }],
          "request": {
            "url": "http://localhost:3000/api/user",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ]
          }
        },
        {
          "name": "Update User",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                "",
                "var user = responseJSON.user || {};",
                "",
                "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                ""
              ]
            }
          }],
          "request": {
            "url": "http://localhost:3000/api/user",
            "method": "PUT",
            "header": [{
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"ms49366@fer.hr\"}}"
            }
          }
        }
      ]
    },
    {
      "name": "Tournaments with authentication",
      "item": [
        {
          "name": "All Tournaments",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"tournaments\" property'] = responseJSON.hasOwnProperty('tournaments');",
                "    tests['Response contains \"tournamentsCount\" property'] = responseJSON.hasOwnProperty('tournamentsCount');",
                "    tests['tournamentsCount is an integer'] = Number.isInteger(responseJSON.tournamentsCount);",
                "",
                "    if(responseJSON.tournaments.length){",
                "        var tournament = responseJSON.tournaments[0];",
                "",
                "        tests['Tournament has \"title\" property'] = tournament.hasOwnProperty('title');",
                "        tests['Tournament has \"slug\" property'] = tournament.hasOwnProperty('slug');",
                "        tests['Tournament has \"body\" property'] = tournament.hasOwnProperty('body');",
                "        tests['Tournament has \"createdAt\" property'] = tournament.hasOwnProperty('createdAt');",
                "        tests['Tournament has \"updatedAt\" property'] = tournament.hasOwnProperty('updatedAt');",
                "        tests['Tournament has \"organiser\" property'] = tournament.hasOwnProperty('organiser');",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "http://localhost:3000/api/tournaments",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ]
          }
        },
        {
          "name": "Tournaments by Organiser",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"tournaments\" property'] = responseJSON.hasOwnProperty('tournaments');",
                "    tests['Response contains \"tournamentsCount\" property'] = responseJSON.hasOwnProperty('tournamentsCount');",
                "    tests['tournamentsCount is an integer'] = Number.isInteger(responseJSON.tournamentsCount);",
                "",
                "    if(responseJSON.tournaments.length){",
                "        var tournament = responseJSON.tournaments[0];",
                "",
                "        tests['Tournament has \"title\" property'] = tournament.hasOwnProperty('title');",
                "        tests['Tournament has \"slug\" property'] = tournament.hasOwnProperty('slug');",
                "        tests['Tournament has \"body\" property'] = tournament.hasOwnProperty('body');",
                "        tests['Tournament has \"createdAt\" property'] = tournament.hasOwnProperty('createdAt');",
                "        tests['Tournament has \"updatedAt\" property'] = tournament.hasOwnProperty('updatedAt');",
                "        tests['Tournament has \"organiser\" property'] = tournament.hasOwnProperty('organiser');",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "http://localhost:3000/api/tournaments?organiser=mstorga",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ]
          }
        },
        {
          "name": "Tournaments by Organiser with auth",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"tournaments\" property'] = responseJSON.hasOwnProperty('tournaments');",
                "    tests['Response contains \"tournamentsCount\" property'] = responseJSON.hasOwnProperty('tournamentsCount');",
                "    tests['tournamentsCount is an integer'] = Number.isInteger(responseJSON.tournamentsCount);",
                "",
                "    if(responseJSON.tournaments.length){",
                "        var tournament = responseJSON.tournaments[0];",
                "",
                "        tests['Tournament has \"title\" property'] = tournament.hasOwnProperty('title');",
                "        tests['Tournament has \"slug\" property'] = tournament.hasOwnProperty('slug');",
                "        tests['Tournament has \"body\" property'] = tournament.hasOwnProperty('body');",
                "        tests['Tournament has \"createdAt\" property'] = tournament.hasOwnProperty('createdAt');",
                "        tests['Tournament has \"updatedAt\" property'] = tournament.hasOwnProperty('updatedAt');",
                "        tests['Tournament has \"organiser\" property'] = tournament.hasOwnProperty('organiser');",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "http://localhost:3000/api/tournaments?organiser=mstorga",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ]
          }
        },
        {
          "name": "Create Tournament",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"tournament\" property'] = responseJSON.hasOwnProperty('tournament');",
                "",
                "var tournament = responseJSON.tournament || {};",
                "",
                "tests['Tournament has \"title\" property'] = tournament.hasOwnProperty('title');",
                "tests['Tournament has \"slug\" property'] = tournament.hasOwnProperty('slug');",
                "if(tests['Tournament has \"slug\" property']){",
                "    postman.setEnvironmentVariable('slug', tournament.slug);",
                "}",
                "tests['Tournament has \"body\" property'] = tournament.hasOwnProperty('body');",
                "tests['Tournament has \"createdAt\" property'] = tournament.hasOwnProperty('createdAt');",
                "tests['Tournament has \"updatedAt\" property'] = tournament.hasOwnProperty('updatedAt');",
                "tests['Tournament has \"organiser\" property'] = tournament.hasOwnProperty('organiser');",
                ""
              ]
            }
          }],
          "request": {
            "url": "http://localhost:3000/api/tournaments",
            "method": "POST",
            "header": [{
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"tournament\":{\"title\":\"How to train your dragon\", \"body\":\"Very carefully.\"}}"
            }
          }
        },
        {
          "name": "Single Tournament by slug",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"tournament\" property'] = responseJSON.hasOwnProperty('tournament');",
                "",
                "var tournament = responseJSON.tournament || {};",
                "",
                "tests['Tournament has \"title\" property'] = tournament.hasOwnProperty('title');",
                "tests['Tournament has \"slug\" property'] = tournament.hasOwnProperty('slug');",
                "tests['Tournament has \"body\" property'] = tournament.hasOwnProperty('body');",
                "tests['Tournament has \"createdAt\" property'] = tournament.hasOwnProperty('createdAt');",
                "tests['Tournament has \"updatedAt\" property'] = tournament.hasOwnProperty('updatedAt');",
                "tests['Tournament has \"organiser\" property'] = tournament.hasOwnProperty('organiser');",
                ""
              ]
            }
          }],
          "request": {
            "url": "http://localhost:3000/api/tournaments/{{slug}}",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ]
          }
        },
        {
          "name": "Update Tournament",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "if (!(environment.isIntegrationTest)) {",
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"tournament\" property'] = responseJSON.hasOwnProperty('tournament');",
                "",
                "var tournament = responseJSON.tournament || {};",
                "",
                "tests['Tournament has \"title\" property'] = tournament.hasOwnProperty('title');",
                "tests['Tournament has \"slug\" property'] = tournament.hasOwnProperty('slug');",
                "tests['Tournament has \"body\" property'] = tournament.hasOwnProperty('body');",
                "tests['Tournament has \"createdAt\" property'] = tournament.hasOwnProperty('createdAt');",
                "tests['Tournament has \"updatedAt\" property'] = tournament.hasOwnProperty('updatedAt');",
                "tests['Tournament has \"organiser\" property'] = tournament.hasOwnProperty('organiser');",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "http://localhost:3000/api/tournaments/{{slug}}",
            "method": "PUT",
            "header": [{
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"tournament\":{\"body\":\"With two hands\"}}"
            }
          }
        }
      ]
    },
    {
      "name": "Tournaments",
      "item": [{
          "name": "All Tournaments",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"tournaments\" property'] = responseJSON.hasOwnProperty('tournaments');",
                "    tests['Response contains \"tournamentsCount\" property'] = responseJSON.hasOwnProperty('tournamentsCount');",
                "    tests['tournamentsCount is an integer'] = Number.isInteger(responseJSON.tournamentsCount);",
                "",
                "    if(responseJSON.tournaments.length){",
                "        var tournament = responseJSON.tournaments[0];",
                "",
                "        tests['Tournament has \"title\" property'] = tournament.hasOwnProperty('title');",
                "        tests['Tournament has \"slug\" property'] = tournament.hasOwnProperty('slug');",
                "        tests['Tournament has \"body\" property'] = tournament.hasOwnProperty('body');",
                "        tests['Tournament has \"createdAt\" property'] = tournament.hasOwnProperty('createdAt');",
                "        tests['Tournament has \"updatedAt\" property'] = tournament.hasOwnProperty('updatedAt');",
                "        tests['Tournament has \"organiser\" property'] = tournament.hasOwnProperty('organiser');",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "http://localhost:3000/api/tournaments",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ]
          }
        },
        {
          "name": "Tournaments by Organiser",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"tournaments\" property'] = responseJSON.hasOwnProperty('tournaments');",
                "    tests['Response contains \"tournamentsCount\" property'] = responseJSON.hasOwnProperty('tournamentsCount');",
                "    tests['tournamentsCount is an integer'] = Number.isInteger(responseJSON.tournamentsCount);",
                "",
                "    if(responseJSON.tournaments.length){",
                "        var tournament = responseJSON.tournaments[0];",
                "",
                "        tests['Tournament has \"title\" property'] = tournament.hasOwnProperty('title');",
                "        tests['Tournament has \"slug\" property'] = tournament.hasOwnProperty('slug');",
                "        tests['Tournament has \"body\" property'] = tournament.hasOwnProperty('body');",
                "        tests['Tournament has \"createdAt\" property'] = tournament.hasOwnProperty('createdAt');",
                "        tests['Tournament has \"updatedAt\" property'] = tournament.hasOwnProperty('updatedAt');",
                "        tests['Tournament has \"organiser\" property'] = tournament.hasOwnProperty('organiser');",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": {
              "raw": "http://localhost:3000/api/tournaments?organiser=mstorga",
              "host": [
                "http://localhost:3000/api"
              ],
              "path": [
                "tournaments"
              ],
              "query": [{
                "key": "organiser",
                "value": "mstorga"
              }],
              "variable": []
            },
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ]
          }
        },
        {
          "name": "Single Tournament by slug",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"tournament\" property'] = responseJSON.hasOwnProperty('tournament');",
                "",
                "var tournament = responseJSON.tournament || {};",
                "",
                "tests['Tournament has \"title\" property'] = tournament.hasOwnProperty('title');",
                "tests['Tournament has \"slug\" property'] = tournament.hasOwnProperty('slug');",
                "tests['Tournament has \"body\" property'] = tournament.hasOwnProperty('body');",
                "tests['Tournament has \"createdAt\" property'] = tournament.hasOwnProperty('createdAt');",
                "tests['Tournament has \"updatedAt\" property'] = tournament.hasOwnProperty('updatedAt');",
                "tests['Tournament has \"organiser\" property'] = tournament.hasOwnProperty('organiser');",
                ""
              ]
            }
          }],
          "request": {
            "url": "http://localhost:3000/api/tournaments/{{slug}}",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ]
          }
        }
      ]
    },
    {
      "name": "Wins",
      "item": [{
          "name": "All Wins for Tournament",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"wins\" property'] = responseJSON.hasOwnProperty('wins');",
                "",
                "    if(responseJSON.wins.length){",
                "        var win = responseJSON.wins[0];",
                "",
                "        tests['Win has \"id\" property'] = win.hasOwnProperty('id');",
                "        tests['Win has \"body\" property'] = win.hasOwnProperty('body');",
                "        tests['Win has \"createdAt\" property'] = win.hasOwnProperty('createdAt');",
                "        tests['Win has \"updatedAt\" property'] = win.hasOwnProperty('updatedAt');",
                "        tests['Win has \"fighter\" property'] = win.hasOwnProperty('fighter');",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "http://localhost:3000/api/tournaments/{{slug}}/wins",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ]
          }
        },
        {
          "name": "Create Win for Tournament",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"win\" property'] = responseJSON.hasOwnProperty('win');",
                "",
                "var win = responseJSON.win || {};",
                "",
                "tests['Win has \"id\" property'] = win.hasOwnProperty('id');",
                "tests['Win has \"body\" property'] = win.hasOwnProperty('body');",
                "tests['Win has \"createdAt\" property'] = win.hasOwnProperty('createdAt');",
                "tests['Win has \"fighter\" property'] = win.hasOwnProperty('fighter');",
                ""
              ]
            }
          }],
          "request": {
            "url": "http://localhost:3000/api/tournaments/{{slug}}/wins",
            "method": "POST",
            "header": [{
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"win\":{\"body\":\"Thank you so much!\"}}"
            }
          }
        },
        {
          "name": "Delete Win for Tournament",
          "request": {
            "url": "http://localhost:3000/api/tournaments/{{slug}}/wins/1",
            "method": "DELETE",
            "header": [{
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ]
          }
        }
      ]
    },
    {
      "name": "Profiles",
      "item": [{
          "name": "Profile",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "if (!(environment.isIntegrationTest)) {",
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"profile\" property'] = responseJSON.hasOwnProperty('profile');",
                "    ",
                "    var profile = responseJSON.profile || {};",
                "    ",
                "    tests['Profile has \"username\" property'] = profile.hasOwnProperty('username');",
                "}",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "http://localhost:3000/api/profiles/mstorga",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ]
          }
        }
      ]
    },
    {
      "name": "Cleanup",
      "item": [{
        "name": "Delete Tournament",
        "request": {
          "url": "http://localhost:3000/api/tournaments/{{slug}}",
          "method": "DELETE",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Requested-With",
              "value": "XMLHttpRequest"
            },
            {
              "key": "Authorization",
              "value": "Token {{token}}"
            }
          ]
        }
      }]
    }
  ]
}
